{
  "name": "gulp-browserify",
  "version": "0.2.4",
  "description": "Bundle modules with Browserify",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/deepak1556/gulp-browserify"
  },
  "author": {
    "name": "Robo",
    "email": "hop2deep@gmail.com"
  },
  "dependencies": {
    "browserify": "~3.14.0",
    "event-stream": "*",
    "gulp-util": "~2.2.0",
    "gulp-concat": "~2.1.4"
  },
  "main": "index.js",
  "engines": {
    "node": ">= 0.6"
  },
  "scripts": {
    "test": "mocha --timeout=6000"
  },
  "devDependencies": {
    "mocha": "~1.15.1",
    "chai": "~1.8.1",
    "gulp": "~3.1.4"
  },
  "keywords": [
    "gulpplugin",
    "gulpfriendly",
    "browserify"
  ],
  "readme": "[gulp](https://github.com/wearefractal/gulp)-browserify\r\n===============\r\n\r\nBundle modules with BrowserifyJS\r\n[![Build Status](https://travis-ci.org/deepak1556/gulp-browserify.png)](https://travis-ci.org/deepak1556/gulp-browserify)\r\n\r\n## Install\r\n\r\n```\r\nnpm install --save gulp-browserify\r\n```\r\n\r\n## Example\r\n\r\n```javascript\r\nvar gulp = require('gulp');\r\nvar browserify = require('gulp-browserify');\r\nvar concat = require('gulp-concat');\r\n\r\ngulp.task('scripts', function() {\r\n\t//single entry point to browserify\r\n\tgulp.src(['src/index.js'])\r\n\t\t.pipe(browserify({\r\n\t\t  insertGlobals : true,\r\n\t\t  debug : true\r\n\t\t}))\r\n\t\t.pipe(concat('dest.js'))\r\n\t\t.pipe(gulp.dest('./build'))\r\n});\r\n\r\ngulp.task('default', function() {\r\n\tgulp.run('scripts');\r\n});\r\n```\r\n\r\n*Note* : Supports streams too, pass `{buffer : false}` as option to `gulp.src()`\r\n\r\n### Options\r\n\r\n#### noParse\r\n\r\nType : `[String]`\r\n\r\nArray of file paths that Browserify should not attempt to parse for require() statements, which should improve compilation time for large library files that do not need to be parsed.\r\n\r\n#### transform\r\n\r\nType : `[String || function]`\r\n\r\nSpecifies a pipeline of functions (or modules) through which the browserified bundle will be run. Below is an example of transform used with gulp-browserify to automatically compile coffeescript files for use in a bundle:\r\n\r\n```javascript\r\ngulp.src(['src/**/*.coffee'])\r\n    .pipe(browserify({\r\n\ttransform : ['coffeeify'],\r\n\tinsertGlobals : true,\r\n\tdebug : true\r\n    }))\r\n```\r\n\r\n#### debug\r\n\r\nType : `Boolean`\r\n\r\nEnable source map support\r\n\r\n#### Other Options\r\n\r\nAny other options you provide will be passed through to browserify. This is useful for setting things like `standalone` or `ignoreGlobals`.\r\n\r\n### Events\r\n\r\n#### prebundle\r\n\r\n```javascript\r\n.on('prebundle', function(bundler){})\r\n```\r\n\r\nEvent triggered just before invoking `bundler.bundle()` and provides bundler object to work with in the callback.\r\n\r\n#### postbundle\r\n\r\n```javascript\r\n.on('postbundle', function(src){})\r\n```\r\n\r\nEvent triggered after the bundle process is over and provides the bundled data as arguemnt to the callback.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/deepak1556/gulp-browserify/issues"
  },
  "homepage": "https://github.com/deepak1556/gulp-browserify",
  "_id": "gulp-browserify@0.2.4",
  "_from": "gulp-browserify@"
}
